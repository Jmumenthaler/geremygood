// Generated by CoffeeScript 1.3.3

/*
Coffee file for Geremy Good
*/


(function() {

  $('document').ready(function() {
    var navigation, viewportHeight;
    navigation = $('nav');
    viewportHeight = $(window).height();
    $("#friends ul li").shuffle();
    $("#organizations ul li").shuffle();
    $("nav ol a").click(function(e) {
      var destination, destinationTop;
      e.preventDefault();
      destination = $(this).attr("href");
      destinationTop = $(destination).offset();
      return $("html, body").animate({
        scrollTop: destinationTop.top
      });
    });
    $(window).scroll(function() {
      var pixels;
      pixels = $(window).scrollTop();
      return $('section, article').each(function() {
        var $this, color, current, height, offset;
        $this = $(this);
        offset = $this.offset();
        height = $this.outerHeight();
        if (pixels + (viewportHeight / 2) > offset.top && pixels + (viewportHeight / 2) < offset.top + height) {
          current = $this.index();
          $this.addClass('active');
          $('nav ol li:nth-of-type(' + current + ')').addClass('active');
          $('nav ol li:not(:nth-of-type(' + current + '))').removeClass('active');
          color = $('li.active a').css('background-color');
          return $('html').css({
            'border-color': color
          });
        } else {
          return $this.removeClass('active');
        }
      });
    });
    return $(document).bind('keydown', function(e) {
      var current;
      if (e.keyCode === 38) {
        current = $('section.active, article.active').index();
        current = parseInt(current);
        return $('nav ol li:nth-of-type(' + (current - 1) + ') a').click();
      } else if (e.keyCode === 40) {
        current = $('section.active, article.active').index();
        current = parseInt(current);
        return $('nav ol li:nth-of-type(' + (current + 1) + ') a').click();
      }
    });
  });

  (function($) {
    return $.fn.shuffle = function() {
      var allElems, getRandom, shuffled;
      allElems = this.get();
      getRandom = function(max) {
        return Math.floor(Math.random() * max);
      };
      shuffled = $.map(allElems, function() {
        var randEl, random;
        random = getRandom(allElems.length);
        randEl = $(allElems[random]).clone(true)[0];
        allElems.splice(random, 1);
        return randEl;
      });
      this.each(function(i) {
        return $(this).replaceWith($(shuffled[i]));
      });
      return $(shuffled);
    };
  })(jQuery);

}).call(this);
